{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/create-source-map-consumer.js","webpack:///./lib/semaphore.js","webpack:///./lib/helpers.js","webpack:///./lib/fetcher.js","webpack:///./lib/index.js","webpack:///external \"dedent\"","webpack:///external \"error-stack-parser\"","webpack:///external \"source-map/lib/source-map-consumer\""],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;;AAE4B;;AAE5B;;;ACRA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;AC3CA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA,mBAAmB,aAAa,IAAI,OAAO,GAAG,KAAK,GAAG,OAAO;AAC7D;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY,IAAI,uBAAuB;AACvD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEQ;;;ACtJR;AACA;AACA;;AAEA;AACA;;AAEoC;;AAEpC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,YAAY,GAAG;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB,6BAA6B;AAC9C;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;ACnJA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAC4B;;AAE5B;;AAE4B;;AAE5B;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,qBAAqB,mCAAmC;AACxD;AACA;AACA;AACA;;AAEA,oCAAoC;AACpC,6BAA6B;AAC7B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA,eAAe,8BAA8B;;AAE7C;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA,0EAAgB;;;;;;;;;;;;;AC5HhB,mC;;;;;;;;;;;;ACAA,+C;;;;;;;;;;;;ACAA,+D","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/index.js\");\n","//\n// README\n//  - This method only exists because it felt too awkward getting a promise\n//    from a constructor.  At least now that awkward code only lives here!\n//\n\nimport { SourceMapConsumer } from 'source-map/lib/source-map-consumer'\n\nexport default (...args) => new SourceMapConsumer(...args)\n","//\n// TODO: remove this file and utilize promises instead\n//\n\n//------//\n// Main //\n//------//\n\nclass Semaphore {\n  constructor() {\n    this.count = 0\n    this.pending = []\n  }\n\n  incr() {\n    this.count += 1\n  }\n\n  decr() {\n    this.count -= 1\n    this.flush()\n  }\n\n  whenReady(fn) {\n    this.pending.push(fn)\n    this.flush()\n  }\n\n  flush() {\n    if (this.count === 0) {\n      this.pending.forEach(function(fn) {\n        fn()\n      })\n      this.pending = []\n    }\n  }\n}\n\n//\n//---------//\n// Exports //\n//---------//\n\nexport default Semaphore\n","//------//\n// Main //\n//------//\n\n//\n// This is a crude way to bind all the functions on your prototype chain.  It\n//   doesn't check the input, so make sure to pass `this` from constructor\n//   functions (or classes).\n//\n// **Note this method binds all methods up the prototype except for Object,\n//   which will be the root prototype for all instances.\n//\nfunction bindAllPrototypeFunctions(instance) {\n  const prototypeChain = passThrough(instance, [\n    getPrototypeChain,\n    getAllButLast,\n  ])\n\n  prototypeChain.forEach(prototypeN => {\n    Object.getOwnPropertyNames(prototypeN)\n      .filter(key => {\n        return key !== 'constructor' && typeof instance[key] === 'function'\n      })\n      .forEach(key => {\n        instance[key] = instance[key].bind(instance)\n      })\n  })\n\n  return instance\n}\n\nconst processSourceMaps = (parsedStack, fileNameToSourceMapConsumer) => {\n  return parsedStack.reduce((result, aStackFrame) => {\n    const {\n      fileName,\n      functionName,\n      lineNumber,\n      columnNumber,\n      source,\n    } = aStackFrame\n\n    const aSourceMapConsumer = fileNameToSourceMapConsumer[fileName]\n\n    if (!aSourceMapConsumer) return mAppend(source, result)\n\n    const sourceMapPosition = aSourceMapConsumer.originalPositionFor({\n      column: columnNumber,\n      line: lineNumber,\n    })\n\n    const formattedSourceMapFrame = getFormattedSourceMapFrame(\n      sourceMapPosition,\n      functionName\n    )\n\n    return mAppend(formattedSourceMapFrame, result)\n  }, [])\n}\n\n//\n//------------------//\n// Helper Functions //\n//------------------//\n\n//\n// 'm' stands for 'mutates' which refers to anArray being modified\n//\nfunction mAppend(anElement, anArray) {\n  anArray.push(anElement)\n  return anArray\n}\n\nfunction passThrough(something, arrayOfFunctions) {\n  return arrayOfFunctions.reduce(\n    (result, aFunction) => aFunction(result),\n    something\n  )\n}\n\nfunction getAllButLast(array) {\n  return array.slice(0, -1)\n}\n\nfunction getPrototypeChain(instance) {\n  const result = []\n\n  let currentPrototype = Reflect.getPrototypeOf(instance)\n\n  while (currentPrototype !== null) {\n    result.push(currentPrototype)\n    currentPrototype = Reflect.getPrototypeOf(currentPrototype)\n  }\n\n  return result\n}\n\n//\n// TODO: figure out a better name for this function\n//\nfunction getFormattedSourceMapFrame(sourceMapPosition, functionNamePerBrowser) {\n  const {\n    column,\n    line,\n    name: functionNamePerSourceMap,\n    source: sourcePerSourceMap,\n  } = sourceMapPosition\n\n  const functionName =\n    functionNamePerSourceMap || functionNamePerBrowser || '(unknown)'\n\n  const source = maybeTransformSource(sourcePerSourceMap)\n\n  return `    at ${functionName} (${source}:${line}:${column})`\n}\n\nfunction startsWith(possiblePrefix, stringToTest) {\n  const prefixLength = possiblePrefix.length\n  if (prefixLength > stringToTest) return false\n\n  return stringToTest.slice(0, prefixLength) === possiblePrefix\n}\n\n//\n// Currently this only transforms the source property if it's a webpack file.\n//   I'm leaving the function name generic because it may perform other\n//   transforms in the future.\n//\nfunction maybeTransformSource(sourcePerSourceMap) {\n  let result = sourcePerSourceMap\n\n  const webpackFile = 'webpack:///'\n\n  if (startsWith(webpackFile, sourcePerSourceMap)) {\n    const sourceAfterWebpackFile = sourcePerSourceMap.slice(webpackFile.length)\n    //\n    // This has not undergone much testing.  I only noticed in the chrome\n    //   debugger that console outputs this transformed path which allows us\n    //   to click it.\n    //\n    result = `${webpackFile}./${sourceAfterWebpackFile}`\n  }\n\n  return result\n}\n\n//\n//---------//\n// Exports //\n//---------//\n\nexport { bindAllPrototypeFunctions, processSourceMaps }\n","//---------//\n// Imports //\n//---------//\n\nimport createSourceMapConsumer from './create-source-map-consumer'\nimport Semaphore from './semaphore'\n\nimport { bindAllPrototypeFunctions } from './helpers'\n\n//\n//------//\n// Init //\n//------//\n\nconst absUrlRegex = new RegExp('^(?:[a-z]+:)?//', 'i'),\n  XMLHttpFactories = getXmlHttpFactories()\n\n//\n//------//\n// Main //\n//------//\n\nclass Fetcher {\n  constructor() {\n    bindAllPrototypeFunctions(this)\n    this.sem = new Semaphore()\n    this.fileNameToSourceMapConsumer = {}\n  }\n\n  ajax(fileName, callback) {\n    const xhr = createXMLHTTPObject()\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState == 4) {\n        callback(xhr, fileName)\n      }\n    }\n    xhr.open('GET', fileName)\n    xhr.send()\n  }\n\n  fetchScript(fileName) {\n    if (!(fileName in this.fileNameToSourceMapConsumer)) {\n      this.sem.incr()\n      this.fileNameToSourceMapConsumer[fileName] = null\n    } else {\n      return\n    }\n\n    this.ajax(fileName, this.onScriptLoad)\n  }\n\n  async onScriptLoad(xhr, fileName) {\n    if (\n      xhr.status === 200 ||\n      (fileName.slice(0, 7) === 'file://' && xhr.status === 0)\n    ) {\n      // find .map in file.\n      //\n      // attempt to find it at the very end of the file, but tolerate trailing\n      // whitespace inserted by some packers.\n      const match = xhr.responseText.match(\n        '//# [s]ourceMappingURL=(.*)[\\\\s]*$',\n        'm'\n      )\n      if (match && match.length === 2) {\n        // get the map\n        let mapUri = match[1]\n\n        const embeddedSourceMap = mapUri.match(\n          'data:application/json;(charset=[^;]+;)?base64,(.*)'\n        )\n\n        if (embeddedSourceMap && embeddedSourceMap[2]) {\n          this.fileNameToSourceMapConsumer[\n            fileName\n          ] = await createSourceMapConsumer(atob(embeddedSourceMap[2]))\n          this.sem.decr()\n        } else {\n          if (!absUrlRegex.test(mapUri)) {\n            // relative url; according to sourcemaps spec is 'source origin'\n            const lastSlash = fileName.lastIndexOf('/')\n            if (lastSlash !== -1) {\n              const origin = fileName.slice(0, lastSlash + 1)\n              mapUri = origin + mapUri\n              // note if lastSlash === -1, actual script fileName has no slash\n              // somehow, so no way to use it as a prefix... we give up and try\n              // as absolute\n            }\n          }\n\n          this.ajax(mapUri, async xhr => {\n            if (\n              xhr.status === 200 ||\n              (mapUri.slice(0, 7) === 'file://' && xhr.status === 0)\n            ) {\n              this.fileNameToSourceMapConsumer[\n                fileName\n              ] = await createSourceMapConsumer(xhr.responseText)\n            }\n            this.sem.decr()\n          })\n        }\n      } else {\n        // no map\n        this.sem.decr()\n      }\n    } else {\n      // HTTP error fetching fileName of the script\n      this.sem.decr()\n    }\n  }\n}\n\n//\n//------------------//\n// Helper Functions //\n//------------------//\n\nfunction createXMLHTTPObject() {\n  let xmlhttp = false\n\n  for (let i = 0; i < XMLHttpFactories.length; i++) {\n    try {\n      xmlhttp = XMLHttpFactories[i]()\n    } catch (e) {\n      continue\n    }\n    break\n  }\n  return xmlhttp\n}\n\nfunction getXmlHttpFactories() {\n  return [\n    () => new XMLHttpRequest(),\n    () => new ActiveXObject('Msxml2.XMLHTTP'),\n    () => new ActiveXObject('Msxml3.XMLHTTP'),\n    () => new ActiveXObject('Microsoft.XMLHTTP'),\n  ]\n}\n\n//\n//---------//\n// Exports //\n//---------//\n\nexport default Fetcher\n","//\n// README\n//   - We're kind of stuck with the 'initialize' method unless and until\n//     source-map decides to make SourceMapConsumer a non-stateful singleton.\n//     Ideally they would have provided a factory method that allows us to\n//     initialize multiple SourceMapConsumer's.\n//\n\n//\n// TODO: reorganize SourceMapConsumer code to utilize its new `with` method.\n//   The goal is to remove the state being passed around because it makes the\n//   code more complex.\n//\n//   reference: https://github.com/mozilla/source-map#sourcemapconsumerwith\n//\n\n/*\n * sourcemapped-stacktrace.js\n * created by James Salter <iteration@gmail.com> (2014)\n *\n * https://github.com/novocaine/sourcemapped-stacktrace\n *\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n//---------//\n// Imports //\n//---------//\n\nimport dedent from 'dedent'\nimport errorStackParser from 'error-stack-parser'\nimport { SourceMapConsumer } from 'source-map/lib/source-map-consumer'\n\nimport Fetcher from './fetcher'\n\nimport { processSourceMaps } from './helpers'\n\n//\n//------//\n// Init //\n//------//\n\nconst anonymousRe = /<anonymous>/\n\nlet hasInitialized = false\n\n//\n//------//\n// Main //\n//------//\n\nconst initialize = ({ ignoreWarning, urlToMappingsWasm }) => {\n  if (!urlToMappingsWasm || typeof urlToMappingsWasm !== 'string') {\n    throw new Error(\n      dedent(`\n        urlToMappingsWasm must be a non-empty string\n\n        typeof urlToMappingsWasm: ${typeof urlToMappingsWasm}\n        urlToMappingsWasm: ${urlToMappingsWasm}\n      `)\n    )\n  }\n\n  if (hasInitialized && !ignoreWarning) {\n    // eslint-disable-next-line no-console\n    console.error(\n      'You have already initialized sourcemapped-stacktrace so this function is a noop.'\n    )\n  } else {\n    hasInitialized = true\n    SourceMapConsumer.initialize({\n      'lib/mappings.wasm': urlToMappingsWasm,\n    })\n  }\n}\n\nconst mapStackTrace = anError => {\n  return new Promise((resolve, reject) => {\n    try {\n      if (!hasInitialized) {\n        throw new Error(\n          'You must run `initialize` before calling `mapStackTrace`'\n        )\n      }\n\n      const fetcher = new Fetcher(),\n        parsedStack = errorStackParser.parse(anError)\n\n      parsedStack\n        .filter(aStackFrame => {\n          return aStackFrame.fileName && !anonymousRe.test(aStackFrame.fileName)\n        })\n        .forEach(aStackFrame => {\n          fetcher.fetchScript(aStackFrame.fileName)\n        })\n\n      fetcher.sem.whenReady(() => {\n        const result = processSourceMaps(\n          parsedStack,\n          fetcher.fileNameToSourceMapConsumer\n        )\n\n        const { fileNameToSourceMapConsumer } = fetcher\n\n        Object.keys(fileNameToSourceMapConsumer)\n          .filter(fileName => fileNameToSourceMapConsumer[fileName])\n          .forEach(fileName => {\n            fetcher.fileNameToSourceMapConsumer[fileName].destroy()\n          })\n\n        resolve(result)\n      })\n    } catch (e) {\n      reject(e)\n    }\n  })\n}\n\n//\n//---------//\n// Exports //\n//---------//\n\nexport default { initialize, mapStackTrace }\n","module.exports = require(\"dedent\");","module.exports = require(\"error-stack-parser\");","module.exports = require(\"source-map/lib/source-map-consumer\");"],"sourceRoot":""}